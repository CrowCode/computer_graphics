import java.awt.AlphaComposite;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.util.ArrayList;

import javax.swing.JPanel;

public class DrawingPanel extends JPanel {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	ArrayList<Shape> shapes = new ArrayList<Shape>();
	ArrayList<Point> startPoints = new ArrayList<Point>();
	ArrayList<Point> endPoints = new ArrayList<Point>();
	Point startDrag, endDrag;
	String shape = "rectangle";

	public DrawingPanel() {
		addMouseListener(new MouseAdapter() {
			public void mousePressed(MouseEvent e) {
				startDrag = new Point(e.getX(), e.getY());
				startPoints.add(startDrag);
				endDrag = startDrag;
				repaint();
			}

			public void mouseReleased(MouseEvent e) {
				Shape r = null;
				endPoints.add(new Point(e.getX(), e.getY()));
				if (shape.equals("rectangle"))
					r = makeRectangle(startDrag.x, startDrag.y, e.getX(),
							e.getY());
				else if (shape.equals("line"))
					r = makeLine(startDrag.x, startDrag.y, e.getX(), e.getY());
				shapes.add(r);
				startDrag = null;
				endDrag = null;
				repaint();
			}

		});

		addMouseMotionListener(new MouseMotionAdapter() {
			public void mouseDragged(MouseEvent e) {
				endDrag = new Point(e.getX(), e.getY());
				repaint();
			}
		});

	}

	private void paintBackground(Graphics2D g2) {
		g2.setPaint(Color.WHITE);
		g2.fill(new Rectangle2D.Double(0, 0, getWidth(), getHeight()));

	}

	public void paint(Graphics g) {
		Graphics2D g2 = (Graphics2D) g;

		g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
				RenderingHints.VALUE_ANTIALIAS_ON);
		paintBackground(g2);

		g2.setStroke(new BasicStroke(2));
		g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,
				0.50f));

		for (Shape s : shapes) {
			g2.setPaint(Color.BLACK);
			g2.draw(s);
		}

		if (startDrag != null && endDrag != null) {
			g2.setPaint(Color.BLACK);

			switch (shape) {
			case "line":
				Shape l = makeLine(startDrag.x, startDrag.y, endDrag.x,
						endDrag.y);
				g2.draw(l);
				break;
			case "rectangle":
				Shape r = makeRectangle(startDrag.x, startDrag.y, endDrag.x,
						endDrag.y);
				g2.draw(r);
				break;
			}

		}
	}

	private Rectangle2D.Float makeRectangle(int x1, int y1, int x2, int y2) {
		return new Rectangle2D.Float(Math.min(x1, x2), Math.min(y1, y2),
				Math.abs(x1 - x2), Math.abs(y1 - y2));
	}

	private Line2D.Float makeLine(int x1, int y1, int x2, int y2) {
		return new Line2D.Float(x1, y1, x2, y2);
	}

	public void setShape(String shape) {
		this.shape = shape;
	}

	public void clearScr() {
		shapes.removeAll(shapes);
		repaint();
	}

	public boolean Clip(float denom, float numer, float tE, float tL) {
		if (denom == 0) { // Paralel line
			if (numer > 0)
				return false; // outside - discard
			return true; // skip to next edge
		}
		float t = numer / denom;
		if (denom > 0) { // PE
			if (t > tL) // tE > tL - discard
				return false;
			if (t > tE)
				tE = t;
		} else { // denom < 0 - PL
			if (t < tE) // tL < tE - discard
				return false;
			if (t < tL)
				tL = t;
		}
		return true;
	}

	void LiangBarsky(Point p1, Point p2, Rectangle2D.Float clip) {
		float dx = p2.x - p1.x, dy = p2.y - p1.y;
		float tE = 0, tL = 1;
		if (Clip(-dx, p1.x - clip.OUT_LEFT, tE, tL))
			if (Clip(dx, clip.OUT_RIGHT - p1.x, tE, tL))
				if (Clip(-dy, p1.y - clip.OUT_BOTTOM, tE, tL))
					if (Clip(dy, clip.OUT_TOP - p1.y, tE, tL)) {
						if (tL < 1) {
							p2.x = (int) (p1.x + dx * tL);
							p2.y = (int) (p1.y + dy * tL);
						}
						if (tE > 0) {
							p1.x += dx * tE;
							p1.y += dy * tE;
						}
						System.out.println("Left"+clip.OUT_LEFT);
						System.out.println("Right"+clip.OUT_RIGHT);
						System.out.println("Bottom"+clip.OUT_BOTTOM);
						System.out.println("Top"+ clip.OUT_TOP);
						shapes.add(2, makeLine(p1.x, p1.y, p2.x, p2.y));
					}
		repaint();
	}
	
	public void applyClipping(){
		
		
		Rectangle2D.Float clip = (Rectangle2D.Float) shapes.get(0);
		
		Point p1 = startPoints.get(1);
		Point p2 = endPoints.get(1);
		
		LiangBarsky(p1, p2, clip);
	}

}
