import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.image.BufferedImage;

import javax.swing.JPanel;


public class DrawingPanel extends JPanel implements KeyListener {
	
	private static final double DEG_TO_RAD = 0.017453292;
	private double modelScale = 10;
	private int xScreenCenter = 800/2;
	private int yScreenCenter = 600/2;
	private double Z_Buf[][] = new double [800][600];
	
	private int[] screenPosition2 = new int []{ 0, 0, 20 };
	
	private int[] viewAngle = new int[]{ 45, 90, 90 };
	
	double CT = Math.cos( DEG_TO_RAD * viewAngle[0] );
	double ST = Math.sin( DEG_TO_RAD * viewAngle[0] );
	double CP = Math.cos( DEG_TO_RAD * viewAngle[1] );
	double SP = Math.sin( DEG_TO_RAD * viewAngle[1] );

	
	double Cube1_points[][] = new double [][]{{1, 1, 1, 1}, {1, -1, 1, 1}, {-1, -1, 1, 1}, {-1, 1, 1, 1}, {1, 1, -1, 1}, {1, -1, -1, 1}, {-1,-1, -1, 1}, {-1, 1, -1, 1}};
	
	double d = xScreenCenter * (CT/ST);
	
	double P[][] = new double[][] { { d, 0, xScreenCenter, 0 }, { 0, -d, yScreenCenter, 0 }, { 0, 0, 0, 1 }, { 0, 0, 1, 0 } };
	double Q[][] = new double[8][4];
	int z = 5;
	int Angle = 10;
	
	int edges_length[] = new int [12];
	double z_difference[] = new double [12];
	double z_edge_step[] = new double [12];
	
		
	BufferedImage image = new BufferedImage(800, 600, BufferedImage.TYPE_INT_RGB);
	Graphics2D g2;
	
	public DrawingPanel(){
		setFocusable(true);
		addKeyListener(this);
		

		for(int i=0; i < 800; i++){
			for (int j=0; j < 600; j++){
				Z_Buf[i][j] = -20;
			}
		}
	}

	@Override
	protected void paintComponent(Graphics g) {
		
		g2 = (Graphics2D) image.getGraphics();
		
		g2.setColor(Color.BLACK);
		g2.fill(new Rectangle(0, 0, 800, 600));
		
		
		d = xScreenCenter * (CT/ST);
		

		for (int i = 0; i < 8; i++)
		{
			Q[i][0] = ( d*( Cube1_points[i][0] / (Cube1_points[i][2] + z) ) ) + xScreenCenter;
			Q[i][1] = ( -d*( Cube1_points[i][1] / (Cube1_points[i][2] + z) ) ) + yScreenCenter;
			Q[i][2] = 1 / (Cube1_points[i][2] + z);
			Q[i][3] = 1;
		}
		
		int pixs[][] = new int [800][600];
			getArray(pixs);
			
		
		
		int xpoints1[] = new int[]{(int)Q[0][0],(int)Q[1][0],(int)Q[2][0],(int)Q[3][0]};
		int ypoints1[] = new int[]{(int)Q[0][1],(int)Q[1][1],(int)Q[2][1],(int)Q[3][1]};
		
		int xpoints2[] = new int[]{(int)Q[4][0],(int)Q[5][0],(int)Q[6][0],(int)Q[7][0]};
		int ypoints2[] = new int[]{(int)Q[4][1],(int)Q[5][1],(int)Q[6][1],(int)Q[7][1]};
		
		int xpoints3[] = new int[]{(int)Q[4][0],(int)Q[0][0],(int)Q[1][0],(int)Q[5][0]};
		int ypoints3[] = new int[]{(int)Q[4][1],(int)Q[0][1],(int)Q[1][1],(int)Q[5][1]};
		
		int xpoints4[] = new int[]{(int)Q[6][0],(int)Q[2][0],(int)Q[3][0],(int)Q[7][0]};
		int ypoints4[] = new int[]{(int)Q[6][1],(int)Q[2][1],(int)Q[3][1],(int)Q[7][1]};
		
		int xpoints5[] = new int[]{(int)Q[1][0],(int)Q[2][0],(int)Q[6][0],(int)Q[5][0]};
		int ypoints5[] = new int[]{(int)Q[1][1],(int)Q[2][1],(int)Q[6][1],(int)Q[5][1]};
		
		int xpoints6[] = new int[]{(int)Q[0][0],(int)Q[3][0],(int)Q[7][0],(int)Q[4][0]};
		int ypoints6[] = new int[]{(int)Q[0][1],(int)Q[3][1],(int)Q[7][1],(int)Q[4][1]};
		
		double a = Math.abs(Q[0][2] - Q[1][2]);
		
	
		z_difference[0] = (Q[0][2] - Q[1][2]);
		z_difference[1] = (Q[1][2] - Q[2][2]);
		z_difference[2] = (Q[0][2] - Q[3][2]);
		z_difference[3] = (Q[3][2] - Q[0][2]);
		z_difference[4] = (Q[4][2] - Q[5][2]);
		z_difference[5] = (Q[5][2] - Q[6][2]);
		z_difference[6] = (Q[6][2] - Q[7][2]);
		z_difference[7] = (Q[7][2] - Q[4][2]);
		z_difference[8] = (Q[4][2] - Q[0][2]);
		z_difference[9] = (Q[1][2] - Q[5][2]);
		z_difference[10] = (Q[2][2] - Q[6][2]);
		z_difference[11] = (Q[3][2] - Q[7][2]);
		
		
		edges_length[0] = drawLine((int)Q[0][0], (int)Q[0][1], Q[0][2], (int)Q[1][0], (int)Q[1][1], Q[1][2], pixs, z_difference[0]);
		
		//edges_length[1] = drawLine((int)Q[1][0], (int)Q[1][1], Q[1][2], (int)Q[2][0], (int)Q[2][1], Q[2][2], pixs, z_difference[1]);
		
		edges_length[2] = drawLine((int)Q[2][0], (int)Q[2][1], Q[0][2], (int)Q[3][0], (int)Q[3][1], Q[3][2], pixs, z_difference[2]);
		
		//edges_length[3] = drawLine((int)Q[3][0], (int)Q[3][1], Q[3][2], (int)Q[0][0], (int)Q[0][1], Q[0][2], pixs, z_difference[3]);
		
				
		edges_length[4] = drawLine((int)Q[4][0], (int)Q[4][1], Q[4][2], (int)Q[5][0], (int)Q[5][1], Q[5][2], pixs, z_difference[4]);
		
		//edges_length[5] = drawLine((int)Q[5][0], (int)Q[5][1], Q[5][2], (int)Q[6][0], (int)Q[6][1], Q[6][2], pixs, z_difference[5]);
		
		edges_length[6] = drawLine((int)Q[6][0], (int)Q[6][1], Q[6][2], (int)Q[7][0], (int)Q[7][1], Q[7][2], pixs, z_difference[6]);
		
		//edges_length[7] = drawLine((int)Q[7][0], (int)Q[7][1], Q[7][2], (int)Q[4][0], (int)Q[4][1], Q[4][2], pixs, z_difference[7]);
		
				
		edges_length[8] = drawLine((int)Q[4][0], (int)Q[4][1], Q[4][2], (int)Q[0][0], (int)Q[0][1], Q[0][2], pixs, z_difference[8]);
		
		edges_length[9] = drawLine((int)Q[1][0], (int)Q[1][1], Q[1][2], (int)Q[5][0], (int)Q[5][1], Q[5][2], pixs, z_difference[9]);
		
		edges_length[10] = drawLine((int)Q[2][0], (int)Q[2][1], Q[2][2], (int)Q[6][0], (int)Q[6][1], Q[6][2], pixs, z_difference[10]);
		
		edges_length[11] = drawLine((int)Q[3][0], (int)Q[3][1], Q[3][2], (int)Q[7][0], (int)Q[7][1], Q[7][2], pixs, z_difference[11]);
		
		
		for (int i=0; i < 12; i++){
			z_edge_step[i] = z_difference[i] / edges_length[i];
		}
		
		
		
		
		
		Polygon poly1 = new Polygon(xpoints1, ypoints1, 4);
		Polygon poly2 = new Polygon(xpoints2, ypoints2, 4);
		Polygon poly3 = new Polygon(xpoints3, ypoints3, 4);
		Polygon poly4 = new Polygon(xpoints4, ypoints4, 4);
		Polygon poly5 = new Polygon(xpoints5, ypoints5, 4);
		Polygon poly6 = new Polygon(xpoints6, ypoints6, 4);
		
		//g2.setColor(Color.GREEN);
		
//		for(int i=0; i < image.getWidth(); i++){
//			for (int j=0; j < image.getHeight(); j++){
//				
//				
//			}
//		}
		
		
		

		
		
	
		setArray(pixs);
		
		g.drawImage(image, 0, 0, null);
	}
	
	

	

	public void projectPoint1( int[] input, int[] output )
	{
		 double x = screenPosition2[0] + input[0] * CT - input[1] * ST;
		 double y = screenPosition2[1] + input[0] * ST * SP + input[1] * CT * SP
		   + input[2] * CP;
		 double temp = viewAngle[2] / (screenPosition2[2] + input[0] * ST * CP
		   + input[1] * CT * CP - input[2] * SP );
	
		 output[0] = (int)(xScreenCenter + modelScale * temp * x);
		 output[1] = (int)(yScreenCenter - modelScale * temp * y);
		 output[2] = 1;
		 output[3] = input[2];
		 
	}
	
		
	public void getArray(int pixels[][]){
		
		for(int i=0; i < image.getWidth(); i++){
			for (int j=0; j < image.getHeight(); j++){
				pixels[i][j] = image.getRGB(i, j);
			}
		}
		
	}
	
	public void setArray(int pixels[][]){
		
		for(int i=0; i < image.getWidth(); i++){
			for (int j=0; j < image.getHeight(); j++){
				 image.setRGB(i, j, pixels[i][j]);
			}
		}
		
	}

	@Override
	public void keyPressed(KeyEvent event) {
		
		if (event.getKeyCode() == KeyEvent.VK_UP) {
			double x, y;
			Angle = 10;

			/// assigning new values to the tops' coordinates
			for (int i=0; i<8; i++)
			{
				x = Cube1_points[i][1];
				y = Cube1_points[i][2];
				Cube1_points[i][1] = (x * Math.cos(Angle * (Math.PI / 180))) - y * Math.sin(Angle * (Math.PI / 180));
				Cube1_points[i][2] = (x * Math.sin(Angle * (Math.PI / 180))) + y * Math.cos(Angle * (Math.PI / 180));
			}
			
			repaint();
			}
		if (event.getKeyCode() == KeyEvent.VK_DOWN) {
			
			double x, y;
			Angle = -10;

			/// assigning new values to the tops' coordinates
			for ( int i=0; i<8; i++ )
			{
				x = Cube1_points[i][1];
				y = Cube1_points[i][2];
				Cube1_points[i][1] = (x * Math.cos(Angle * (Math.PI / 180))) - y * Math.sin(Angle * (Math.PI / 180));
				Cube1_points[i][2] = (x * Math.sin(Angle * (Math.PI / 180))) + y * Math.cos(Angle * (Math.PI / 180));
			}

			
			repaint();
			}
		if (event.getKeyCode() == KeyEvent.VK_RIGHT) {
			double x, y;
			Angle = 10;

			/// assigning new values to the tops' coordinates
			for ( int i=0; i<8; i++ )
			{
				x = Cube1_points[i][0];
				y = Cube1_points[i][2];
				Cube1_points[i][0] = (x * Math.cos(Angle * (Math.PI / 180))) - y * Math.sin(Angle * (Math.PI / 180));
				Cube1_points[i][2] = (x * Math.sin(Angle * (Math.PI / 180))) + y * Math.cos(Angle * (Math.PI / 180));
			}
			repaint();
			}
		if (event.getKeyCode() == KeyEvent.VK_LEFT) {
			double x, y;
			Angle = -10;

			/// assigning new values to the tops' coordinates
			for ( int i=0; i<8; i++ )
			{
				x = Cube1_points[i][0];
				y = Cube1_points[i][2];
				Cube1_points[i][0] = (x * Math.cos(Angle * (Math.PI / 180))) - y * Math.sin(Angle * (Math.PI / 180));
				Cube1_points[i][2] = (x * Math.sin(Angle * (Math.PI / 180))) + y * Math.cos(Angle * (Math.PI / 180));
			}
			repaint();
			}
		
	}

	@Override
	public void keyReleased(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void keyTyped(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}
	
public int drawLine(int x1, int y1, double z1, int x2, int y2, double z2, int[][] panelArray, double z_def) {
		
	int count = 0;
		int w = x2 - x1;
		int h = y2 - y1;
		int dx1 = 0, dy1 = 0, dx2 = 0, dy2 = 0;
		if (w < 0)
			dx1 = -1;
		else if (w > 0)
			dx1 = 1;
		if (h < 0)
			dy1 = -1;
		else if (h > 0)
			dy1 = 1;
		if (w < 0)
			dx2 = -1;
		else if (w > 0)
			dx2 = 1;
		int longest = Math.abs(w);
		int shortest = Math.abs(h);
		if (!(longest > shortest)) {
			longest = Math.abs(h);
			shortest = Math.abs(w);
			if (h < 0)
				dy2 = -1;
			else if (h > 0)
				dy2 = 1;
			dx2 = 0;
		}
		int numerator = longest >> 1;
			z_def = - z_def;
			double z_step = z_def/numerator;
				
			
		for (int i = 0; i <= longest; i++) {
			
			//panelArray[x1+1][y1+1] = 133;
			//panelArray[x1][y1+1] = 133;
			if (Z_Buf[x1][y1] < z1 + i*z_step )
				Z_Buf[x1][y1] = z1 + i*z_step;
			panelArray[x1][y1] = 133;
			//panelArray[x1][y1-1] = 133;
			//panelArray[x1-1][y1+1] = 133;
			
			count++;
			numerator += shortest;
			if (!(numerator < longest)) {
				numerator -= longest;
				x1 += dx1;
				y1 += dy1;
			} else {
				x1 += dx2;
				y1 += dy2;
			}
		}
		return count;
	}
	
public int draw(int x1, int y1, double z1, int x2, int y2, double z2, int[][] panelArray, double z_def) {
	
	int count = 0;
		int w = x2 - x1;
		int h = y2 - y1;
		int dx1 = 0, dy1 = 0, dx2 = 0, dy2 = 0;
		if (w < 0)
			dx1 = -1;
		else if (w > 0)
			dx1 = 1;
		if (h < 0)
			dy1 = -1;
		else if (h > 0)
			dy1 = 1;
		if (w < 0)
			dx2 = -1;
		else if (w > 0)
			dx2 = 1;
		int longest = Math.abs(w);
		int shortest = Math.abs(h);
		if (!(longest > shortest)) {
			longest = Math.abs(h);
			shortest = Math.abs(w);
			if (h < 0)
				dy2 = -1;
			else if (h > 0)
				dy2 = 1;
			dx2 = 0;
		}
		int numerator = longest >> 1;
			z_def = - z_def;
			double z_step = z_def/numerator;
				
			
		for (int i = 0; i <= longest; i++) {
			
			//panelArray[x1+1][y1+1] = 133;
			//panelArray[x1][y1+1] = 133;
			if (Z_Buf[x1][y1] < z1 + i*z_step )
				Z_Buf[x1][y1] = z1 + i*z_step;
			panelArray[x1][y1] = 133;
			//panelArray[x1][y1-1] = 133;
			//panelArray[x1-1][y1+1] = 133;
			
			count++;
			numerator += shortest;
			if (!(numerator < longest)) {
				numerator -= longest;
				x1 += dx1;
				y1 += dy1;
			} else {
				x1 += dx2;
				y1 += dy2;
			}
		}
		return count;
	}

}
